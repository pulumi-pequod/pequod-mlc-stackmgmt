# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['StackSettingsArgs', 'StackSettings']

@pulumi.input_type
class StackSettingsArgs:
    def __init__(__self__, *,
                 delete_stack: Optional[pulumi.Input[str]] = None,
                 drift_management: Optional[pulumi.Input[str]] = None,
                 pulumi_access_token: Optional[pulumi.Input[str]] = None,
                 team_assignment: Optional[pulumi.Input[str]] = None,
                 ttl_minutes: Optional[pulumi.Input[float]] = None):
        """
        The set of arguments for constructing a StackSettings resource.
        :param pulumi.Input[str] delete_stack: Stack delete setting for automated purge processing.
        :param pulumi.Input[str] drift_management: Drift management setting for refresh or correction.
        :param pulumi.Input[str] pulumi_access_token: Pulumi access token to set up as a deployment environment variable if provided.
        :param pulumi.Input[str] team_assignment: Team to which the stack should be assigned.
        :param pulumi.Input[float] ttl_minutes: Number of minutes to let stack live.
        """
        if delete_stack is not None:
            pulumi.set(__self__, "delete_stack", delete_stack)
        if drift_management is not None:
            pulumi.set(__self__, "drift_management", drift_management)
        if pulumi_access_token is not None:
            pulumi.set(__self__, "pulumi_access_token", pulumi_access_token)
        if team_assignment is not None:
            pulumi.set(__self__, "team_assignment", team_assignment)
        if ttl_minutes is not None:
            pulumi.set(__self__, "ttl_minutes", ttl_minutes)

    @property
    @pulumi.getter(name="deleteStack")
    def delete_stack(self) -> Optional[pulumi.Input[str]]:
        """
        Stack delete setting for automated purge processing.
        """
        return pulumi.get(self, "delete_stack")

    @delete_stack.setter
    def delete_stack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_stack", value)

    @property
    @pulumi.getter(name="driftManagement")
    def drift_management(self) -> Optional[pulumi.Input[str]]:
        """
        Drift management setting for refresh or correction.
        """
        return pulumi.get(self, "drift_management")

    @drift_management.setter
    def drift_management(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drift_management", value)

    @property
    @pulumi.getter(name="pulumiAccessToken")
    def pulumi_access_token(self) -> Optional[pulumi.Input[str]]:
        """
        Pulumi access token to set up as a deployment environment variable if provided.
        """
        return pulumi.get(self, "pulumi_access_token")

    @pulumi_access_token.setter
    def pulumi_access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pulumi_access_token", value)

    @property
    @pulumi.getter(name="teamAssignment")
    def team_assignment(self) -> Optional[pulumi.Input[str]]:
        """
        Team to which the stack should be assigned.
        """
        return pulumi.get(self, "team_assignment")

    @team_assignment.setter
    def team_assignment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "team_assignment", value)

    @property
    @pulumi.getter(name="ttlMinutes")
    def ttl_minutes(self) -> Optional[pulumi.Input[float]]:
        """
        Number of minutes to let stack live.
        """
        return pulumi.get(self, "ttl_minutes")

    @ttl_minutes.setter
    def ttl_minutes(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "ttl_minutes", value)


class StackSettings(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_stack: Optional[pulumi.Input[str]] = None,
                 drift_management: Optional[pulumi.Input[str]] = None,
                 pulumi_access_token: Optional[pulumi.Input[str]] = None,
                 team_assignment: Optional[pulumi.Input[str]] = None,
                 ttl_minutes: Optional[pulumi.Input[float]] = None,
                 __props__=None):
        """
        Create a StackSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] delete_stack: Stack delete setting for automated purge processing.
        :param pulumi.Input[str] drift_management: Drift management setting for refresh or correction.
        :param pulumi.Input[str] pulumi_access_token: Pulumi access token to set up as a deployment environment variable if provided.
        :param pulumi.Input[str] team_assignment: Team to which the stack should be assigned.
        :param pulumi.Input[float] ttl_minutes: Number of minutes to let stack live.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[StackSettingsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a StackSettings resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param StackSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StackSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_stack: Optional[pulumi.Input[str]] = None,
                 drift_management: Optional[pulumi.Input[str]] = None,
                 pulumi_access_token: Optional[pulumi.Input[str]] = None,
                 team_assignment: Optional[pulumi.Input[str]] = None,
                 ttl_minutes: Optional[pulumi.Input[float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StackSettingsArgs.__new__(StackSettingsArgs)

            __props__.__dict__["delete_stack"] = delete_stack
            __props__.__dict__["drift_management"] = drift_management
            __props__.__dict__["pulumi_access_token"] = pulumi_access_token
            __props__.__dict__["team_assignment"] = team_assignment
            __props__.__dict__["ttl_minutes"] = ttl_minutes
        super(StackSettings, __self__).__init__(
            'stackmgmt:index:StackSettings',
            resource_name,
            __props__,
            opts,
            remote=True)

